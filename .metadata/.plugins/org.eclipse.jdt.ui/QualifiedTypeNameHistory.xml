<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
    <fullyQualifiedTypeName name="org.springframework.http.server.reactive.ServerHttpResponse"/>
    <fullyQualifiedTypeName name="io.jsonwebtoken.Jwts"/>
    <fullyQualifiedTypeName name="org.springframework.http.HttpHeaders"/>
    <fullyQualifiedTypeName name="java.util.Set"/>
    <fullyQualifiedTypeName name="org.springframework.web.server.ServerWebExchange"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.filter.GatewayFilterChain"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Configuration"/>
    <fullyQualifiedTypeName name="org.springframework.core.annotation.Order"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Bean"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.gateway.filter.GlobalFilter"/>
    <fullyQualifiedTypeName name="reactor.core.publisher.Mono"/>
    <fullyQualifiedTypeName name="org.springframework.core.Ordered"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.config.server.EnableConfigServer"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.netflix.eureka.EnableEurekaClient"/>
    <fullyQualifiedTypeName name="com.user.albums.service.AlbumsService"/>
    <fullyQualifiedTypeName name="com.user.albums.model.AlbumResponseModel"/>
    <fullyQualifiedTypeName name="org.modelmapper.ModelMapper"/>
    <fullyQualifiedTypeName name="com.user.albums.entity.AlbumEntity"/>
    <fullyQualifiedTypeName name="com.users.model.UserResponseModel"/>
    <fullyQualifiedTypeName name="org.springframework.http.ResponseEntity"/>
    <fullyQualifiedTypeName name="org.springframework.core.ParameterizedTypeReference"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.client.discovery.EnableDiscoveryClient"/>
    <fullyQualifiedTypeName name="lombok.Getter"/>
    <fullyQualifiedTypeName name="lombok.Setter"/>
    <fullyQualifiedTypeName name="lombok.NoArgsConstructor"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.client.loadbalancer.LoadBalanced"/>
    <fullyQualifiedTypeName name="org.springframework.web.client.RestTemplate"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.openfeign.EnableFeignClients"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.openfeign.FeignClient"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.GetMapping"/>
    <fullyQualifiedTypeName name="java.util.List"/>
    <fullyQualifiedTypeName name="com.users.model.AlbumResponseModel"/>
    <fullyQualifiedTypeName name="org.springframework.web.bind.annotation.PathVariable"/>
    <fullyQualifiedTypeName name="com.users.feign.AlbumsServiceClient"/>
    <fullyQualifiedTypeName name="org.springframework.web.server.ResponseStatusException"/>
    <fullyQualifiedTypeName name="org.springframework.beans.factory.annotation.Autowired"/>
    <fullyQualifiedTypeName name="feign.codec.ErrorDecoder"/>
    <fullyQualifiedTypeName name="feign.Response"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker"/>
    <fullyQualifiedTypeName name="org.springframework.stereotype.Component"/>
    <fullyQualifiedTypeName name="org.springframework.cloud.openfeign.FallbackFactory"/>
    <fullyQualifiedTypeName name="com.users.feign.AlbumsServiceClient.AlbumsFallbackFactory"/>
    <fullyQualifiedTypeName name="org.slf4j.Logger"/>
    <fullyQualifiedTypeName name="org.slf4j.LoggerFactory"/>
    <fullyQualifiedTypeName name="java.util.ArrayList"/>
    <fullyQualifiedTypeName name="feign.FeignException"/>
    <fullyQualifiedTypeName name="org.springframework.security.config.annotation.web.configuration.EnableWebSecurity"/>
    <fullyQualifiedTypeName name="org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter"/>
    <fullyQualifiedTypeName name="org.springframework.security.config.annotation.web.builders.HttpSecurity"/>
    <fullyQualifiedTypeName name="org.springframework.security.web.authentication.www.BasicAuthenticationFilter"/>
    <fullyQualifiedTypeName name="org.springframework.core.env.Environment"/>
    <fullyQualifiedTypeName name="org.springframework.security.authentication.AuthenticationManager"/>
    <fullyQualifiedTypeName name="org.springframework.security.web.access.intercept.AuthorizationFilter"/>
    <fullyQualifiedTypeName name="com.users.security.filter.AuthorizationHeaderFilter"/>
    <fullyQualifiedTypeName name="org.springframework.http.HttpMethod"/>
    <fullyQualifiedTypeName name="org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity"/>
    <fullyQualifiedTypeName name="org.springframework.security.access.prepost.PreAuthorize"/>
    <fullyQualifiedTypeName name="io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker"/>
    <fullyQualifiedTypeName name="org.springframework.http.HttpStatus"/>
    <fullyQualifiedTypeName name="com.users.dto.UserDto"/>
</qualifiedTypeNameHistroy>
